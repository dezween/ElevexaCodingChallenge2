Coding Challenge 2
Objective:
Extend HashiCorp Vault's Transit Secrets Engine to support the post-quantum cryptographic algorithms CRYSTALS-Kyber. The implementation should include full functionality for encryption, decryption, signing, and verification, along with thorough testing and documentation.
________________


Background:
HashiCorp Vault's Transit Secrets Engine is designed to encrypt, decrypt without storing it. It currently supports various traditional algorithms (e.g., AES-GCM, ECDSA). However, in anticipation of post-quantum security requirements, it needs to be extended to support the following algorithms:
* CRYSTALS-Kyber: A post-quantum public key encapsulation algorithm.
These algorithms were selected as part of the NIST Post-Quantum Cryptography standardization process.
Sources to look at:
* https://pq-crystals.org/
________________


Requirements:
1. Implementation:
   * Write an API server to include CRYSTALS-Kyber with support for key generation, encryption, and decryption.
   * Utilize a Golang post-quantum cryptography library, such as pqcrypto or any other suitable library.
   * Follow best practices for secure key management and cryptographic implementations.
2. API Integration:
   * Implement the following API endpoints (note: the endpoints must be compatible with existing endpoints (e.g. RSA, AES):
      * POST /transit/keys/:name – Create a new key pair with Kyber.
      * POST /transit/encrypt/:name – Encrypt data with Kyber.
      * POST /transit/decrypt/:name – Decrypt data with Kyber.
3. Testing:
   * Write comprehensive unit tests covering all new functionality.
   * Ensure edge cases and error handling are thoroughly tested.
4. Documentation:
   * Provide detailed documentation (e.g. github Readme) for:
      * Code comments and inline explanations.Challenge 2
      * API usage examples for each new endpoint.
      * Configuration steps to enable and use the new algorithms in Vault.
________________


Deliverables:
4. Source Code: A fully functional extension to the Transit Secrets Engine with support for Kyber.
5. Unit and Integration Tests: Tests with high coverage demonstrating the correctness of the implementation.
6. Documentation: Comprehensive documentation as outlined above.
7. Deployment Instructions: Steps to build and deploy the modified Vault version.
________________


Evaluation Criteria:
4. Correctness and Completeness: The solution must correctly implement all required functionalities.
5. Code Quality and Maintainability: The implementation should follow Go best practices, be modular, and maintainable.
6. Security: Proper handling of sensitive data and secure implementation of cryptographic operations.
7. Testing and Coverage: Extensive unit and integration tests with meaningful test cases and high coverage.
8. Documentation and Usability: Clear and concise documentation for developers and users of the API.